name: Test, Build and Deploy to Cloud Run

on:
  push:
    branches: ["main"]

env:
  PROJECT_ID: avid-garage-390413
  GAR_LOCATION: europe-central2
  SERVICE: productivity-backend
  REGION: us-central1

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    container: python:3.11

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: postgres_db
          POSTGRES_PASSWORD: postgres_password
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres_user
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Debug
        run: |
          export OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          echo $#OPENAI_API_KEY
          export GCP_DB_USER=${{ secrets.GCP_DB_USER }}
          echo $#GCP_DB_USER
          export GCP_DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD }}
          echo $#GCP_DB_PASSWORD
          export GCP_DB_HOST=${{ secrets.GCP_DB_HOST }}
          echo $#GCP_DB_HOST
          export GCP_DB_PORT=${{ secrets.GCP_DB_PORT }}
          echo $#GCP_DB_PORT
          export GCP_DB_NAME=${{ secrets.GCP_DB_NAME }}
          echo $#GCP_DB_NAME

      - name: Install PostgreSQL client
        run: |
          apt-get update
          apt-get install --yes postgresql-client

      - name: Query database
        run: psql -h postgres -d postgres_db -U postgres_user -f changelog.sql
        env:
          PGPASSWORD: postgres_password

      - name: Set up Python
        uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: "1.5.1"

      - name: Install poetry dependencies
        run: poetry install

      - name: Update packages
        run: apt-get update

      - name: Install git
        run: |
          apt-get install -y git-all
          git config --global --add safe.directory '*'

      - name: Install pre-commit
        run: apt-get install -y pre-commit

      - name: Check path
        run: |
          pwd
          git status

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Set up environment variables
        uses: allenevans/set-env@v2.0.0
        with:
          GCP_DB_USER: ${{ secrets.GCP_DB_USER }}
          GCP_DB_PASSWORD: ${{ secrets.GCP_DB_PASSWORD }}
          GCP_DB_HOST: ${{ secrets.GCP_DB_HOST }}
          GCP_DB_PORT: ${{ secrets.GCP_DB_PORT }}
          GCP_DB_NAME: ${{ secrets.GCP_DB_NAME }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Run tests
        run: |
          poetry run pytest -s
          echo "TEST:"
          cat tests/models_gen.py
          echo "MODELS:"
          cat models.py

  deploy:
    needs: build_and_test
    permissions:
      contents: "read"
      id-token: "write"

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Google Auth
        id: auth
        uses: "google-github-actions/auth@v0"
        with:
          token_format: "access_token"
          workload_identity_provider: "${{ secrets.WIF_PROVIDER }}"
          service_account: "${{ secrets.WIF_SERVICE_ACCOUNT }}"

      - name: Docker Auth
        id: docker-auth
        uses: "docker/login-action@v1"
        with:
          username: "oauth2accesstoken"
          password: "${{ steps.auth.outputs.access_token }}"
          registry: "${{ env.GAR_LOCATION }}-docker.pkg.dev"

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/productivity:${{ github.sha }}" ./
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/productivity:${{ github.sha }}"

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          image:
            ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}/productivity:${{ github.sha }}
          env-vars: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            GCP_DB_USER=${{ secrets.GCP_DB_USER }}
            GCP_DB_PASSWORD=${{ secrets.GCP_DB_PASSWORD }}
            GCP_DB_HOST=${{ secrets.GCP_DB_HOST }}
            GCP_DB_PORT=${{ secrets.GCP_DB_PORT }}
            GCP_DB_NAME=${{ secrets.GCP_DB_NAME }}
